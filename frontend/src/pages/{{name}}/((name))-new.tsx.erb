import { mdiChartTimelineVariant } from '@mdi/js'
import Head from 'next/head'
import React, { ReactElement } from 'react'
import CardBox from '../../components/CardBox'
import LayoutAuthenticated from '../../layouts/Authenticated'
import SectionMain from '../../components/SectionMain'
import SectionTitleLineWithButton from '../../components/SectionTitleLineWithButton'
import { getPageTitle } from '../../config'

import { Field, Form, Formik } from 'formik'
import FormField from '../../components/FormField'
import BaseDivider from '../../components/BaseDivider'
import BaseButtons from '../../components/BaseButtons'
import BaseButton from '../../components/BaseButton'
import FormCheckRadio from '../../components/FormCheckRadio'
import FormCheckRadioGroup from '../../components/FormCheckRadioGroup'
import { SwitchField } from '../../components/SwitchField'

import { SelectField } from '../../components/SelectField'
import {RichTextField} from "../../components/RichTextField";

import { create } from '../../stores/((name))/((name))Slice'
import { useAppDispatch } from '../../stores/hooks'
import { useRouter } from 'next/router'

const initialValues = {
    <%
      form_fields = @fields.select{|f| f['@show_in_form']}
      form_fields.each_with_index do |f,i|
    %>
    <% if (f['@type'] == 'string' and !f['@multiline']) or f['@type']=='decimal'%>
    <%=f['@name']%>: '',
    <% end %>
    <% if f['@type'] == 'string' and f['@multiline'] == true and !f['@wysiwygEditor'] %>
    <%=f['@name']%>: '',
    <% end %>
    <% if f['@type'] == 'string' and f['@multiline'] == true and f['@wysiwygEditor'] == true %>
    <%=f['@name']%>: '',
    <% end %>
    <% if f['@type'] == 'int' %>
    <%=f['@name']%>: '',
    <% end %>
    <% if f['@type'] == 'date' %>
    <%=f['@name']%>: '',
    date<%=f['@name_cap']%>: '',
    <% end %>
    <% if f['@type'] == 'datetime' %>
    <%=f['@name']%>: '',
    <% end %>
    <% if f['@type'] == 'boolean' %>
    <%=f['@name']%>: false,
    <% end %>
    <% if f['@type'] == 'enum' and f['@widget'] == 'radio' %>
    <%=f['@name']%>: '',
    <% end %>
    <% if f['@type'] == 'enum' and (f['@widget'] == 'select' or !f['@widget']) %>
    <%
      options = f['options'] || []
      first_option = options.first
    %>
    <%=f['@name']%>: '<%= first_option || '' %>',
    <% end %>
    <% if f['@type'] == 'relation_one' %>
    <%=f['@name']%>: '',
    <% end %>
    <% end %>
}


const ((Name))New = () => {
  const router = useRouter()
  const dispatch = useAppDispatch()

  const handleSubmit = async (data) => {
    await dispatch(create(data))
    await router.push('/((name))/((name))-list')
  }
  return (
    <>
      <Head>
        <title>{getPageTitle('New Item')}</title>
      </Head>
      <SectionMain>
        <SectionTitleLineWithButton icon={mdiChartTimelineVariant} title="New Item" main>
        {''}
        </SectionTitleLineWithButton>
        <CardBox>
          <Formik
            initialValues={
                initialValues
            }
            onSubmit={(values) => handleSubmit(values)}
          >
            <Form>
<%
  form_fields = @fields.select{|f| f['@show_in_form']}
  form_fields.each_with_index do |f,i|
%>

<% if f['@type'] == 'string' and !f['@multiline'] %>
  <FormField
      label="<%=f['@title']%>"
  >
      <Field
          name="<%=f['@name']%>"
          placeholder="<%=f['@title']%>"
      />
  </FormField>
<% end %>

<% if f['@type'] == 'string' and f['@multiline'] == true and !f['@wysiwygEditor'] %>
    <FormField label="<%=f['@title']%>" hasTextareaHeight>
        <Field name="<%=f['@name']%>" as="textarea" placeholder="<%=f['@title']%>" />
    </FormField>
<% end %>

<% if f['@type'] == 'string' and f['@multiline'] == true and f['@wysiwygEditor'] == true %>
      <FormField label='<%=f['@title']%>' hasTextareaHeight>
          <Field
              name='<%=f['@name']%>'
              id='<%=f['@name']%>'
              component={RichTextField}
          ></Field>
      </FormField>
<% end %>

<% if f['@type'] == 'int' or f['@type'] == 'decimal' %>
    <FormField
        label="<%=f['@title']%>"
    >
        <Field
            type="number"
            name="<%=f['@name']%>"
            placeholder="<%=f['@title']%>"
        />
    </FormField>
<% end %>

<% if f['@type'] == 'date' %>
  <FormField
      label="<%=f['@title']%>"
  >
      <Field
          type="date"
          name="<%=f['@name']%>"
          placeholder="<%=f['@title']%>"
      />
  </FormField>
<% end %>

<% if f['@type'] == 'datetime' %>
  <FormField
      label="<%=f['@title']%>"
  >
      <Field
          type="datetime-local"
          name="<%=f['@name']%>"
          placeholder="<%=f['@title']%>"
      />
  </FormField>
<% end %>

<% if f['@type'] == 'enum' and f['@widget'] == 'radio' %>
  <FormField label="<%=f['@title']%>">
      <FormCheckRadioGroup>
      <%
        options = f['options']
        options.each_with_index do |o,j|
      %>
          <FormCheckRadio type="radio" label="<%=o%>">
              <Field type="radio" name="<%=f['@name']%>" value="<%=o%>" />
          </FormCheckRadio>
      <% end %>
      </FormCheckRadioGroup>
  </FormField>
<% end %>

<% if f['@type'] == 'enum' and (f['@widget'] == 'select' or !f['@widget']) %>
  <FormField label="<%=f['@title']%>" labelFor="<%=f['@name']%>">
      <Field name="<%=f['@name']%>" id="<%=f['@name']%>" component="select">
      <%
        options = f['options']
        options.each_with_index do |o,j|
      %>
        <option value="<%=o%>"><%=o%></option>
      <% end %>
      </Field>
  </FormField>
<% end %>

<% if f['@type'] == 'boolean' %>
  <FormField label='<%=f['@title']%>' labelFor='<%=f['@name']%>'>
      <Field
          name='<%=f['@name']%>'
          id='<%=f['@name']%>'
          component={SwitchField}
      ></Field>
  </FormField>
<% end %>

<% if f['@type'] == 'relation_one' %>
  <FormField label="<%=f['@title']%>" labelFor="<%=f['@name']%>">
      <Field name="<%=f['@name']%>" id="<%=f['@name']%>" component={SelectField} options={[]} itemRef={'<%=f['@ref']%>'}></Field>
  </FormField>
<% end %>

<% end %>
              <BaseDivider />
              <BaseButtons>
                <BaseButton type="submit" color="info" label="Submit" />
                <BaseButton type="reset" color="info" outline label="Reset" />
                <BaseButton type='reset' color='danger' outline label='Cancel' onClick={() => router.push('/((name))/((name))-list')}/>
              </BaseButtons>
            </Form>
          </Formik>
        </CardBox>
      </SectionMain>
    </>
  )
}

((Name))New.getLayout = function getLayout(page: ReactElement) {
  return (
      <LayoutAuthenticated>
          {page}
      </LayoutAuthenticated>
  )
}

export default ((Name))New
